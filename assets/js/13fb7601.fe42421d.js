(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{168:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),s=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=s(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),b=s(n),u=a,d=b["".concat(o,".").concat(u)]||b[u]||m[u]||i;return n?r.a.createElement(d,c(c({ref:t},l),{},{components:n})):r.a.createElement(d,c({ref:t},l))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},78:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return p})),n.d(t,"default",(function(){return s}));var a=n(3),r=n(7),i=(n(0),n(168)),o={title:"Payments"},c={unversionedId:"features/payments",id:"features/payments",isDocsHomePage:!1,title:"Payments",description:"- Supported Payment Gateway",source:"@site/docs/features/payments.md",slug:"/features/payments",permalink:"/docs/docs/features/payments",editUrl:"https://github.com/moslem-deris/docs/edit/main/docs/features/payments.md",version:"current",lastUpdatedBy:"Moslem Deris",lastUpdatedAt:1616802868,formattedLastUpdatedAt:"3/26/2021",sidebar:"docs",previous:{title:"Pagination",permalink:"/docs/docs/features/pagination"},next:{title:"System Settings",permalink:"/docs/docs/features/system-settings"}},p=[],l={toc:p};function s(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#available-payment-gateways"},"Supported Payment Gateway")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#how-it-works"},"How to charge users")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#payment-accounts"},"Manage Payment Accounts")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#payment-transactions"},"Payment Transactions")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#payment-gateway-container"},"Developing own Payment Gateway Containers")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#mocking-the-real-call-for-testing"},"Mocking for Testing"))),Object(i.b)("br",null),Object(i.b)("br",null),Object(i.b)("p",null,"Apiato provides a ",Object(i.b)("inlineCode",{parentName:"p"},"Payment")," container that acts as ",Object(i.b)("em",{parentName:"p"},"gateway")," for multiple payment providers (",Object(i.b)("inlineCode",{parentName:"p"},"Stripe"),",\n",Object(i.b)("inlineCode",{parentName:"p"},"PayPal"),"...)."),Object(i.b)("a",{name:"available-payment-gateways"}),"## Supported Payment Gateways",Object(i.b)("p",null,"Currently, Apiato Supports the following payment gateways:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Stripe")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"PayPal"))),Object(i.b)("p",null,"If your payment gateway is not supported, build it and contribute your container back."),Object(i.b)("a",{name:"how-it-works"}),"## How to charge users?",Object(i.b)("p",null,"1) Use the ",Object(i.b)("inlineCode",{parentName:"p"},"App\\Containers\\Payment\\Traits\\ChargeableTrait")," on the Model you want to charge and implement the\n",Object(i.b)("inlineCode",{parentName:"p"},"\\App\\Containers\\Payment\\Contracts\\ChargeableInterface")," Interface. The ",Object(i.b)("inlineCode",{parentName:"p"},"User")," by default is setup to be chargeable."),Object(i.b)("p",null,"2) To charge a user, the user must first create a payment account (Stripe, PayPal, WePay,...). Use the respective\nendpoints to create those endpoints (",Object(i.b)("inlineCode",{parentName:"p"},"createStripeAccount"),", ",Object(i.b)("inlineCode",{parentName:"p"},"createWepayAccount"),", ...). A User may have multiple\n",Object(i.b)("inlineCode",{parentName:"p"},"PaymentAccount"),"."),Object(i.b)("p",null,"3) Then charge the user as follow ",Object(i.b)("inlineCode",{parentName:"p"},"$user->charge($account, $amount);"),". By providing the ",Object(i.b)("inlineCode",{parentName:"p"},"$account")," and the ",Object(i.b)("inlineCode",{parentName:"p"},"$amount"),"."),Object(i.b)("p",null,"You can get ",Object(i.b)("inlineCode",{parentName:"p"},"$account")," from the user as follow ",Object(i.b)("inlineCode",{parentName:"p"},"$user->paymentAccounts")," this will return a Collection of all the\nuser payments accounts to select one."),Object(i.b)("p",null,"Example:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-php"},"// in this example we are selecting a random payment account.\n$acccount = $user->paymentAccounts->first();\n\n$amount = 9.99;\n\n// charge the user with the 'USD' currency\n$user->charge($acccount, $amount, 'USD');\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"$user->paymentAccounts")," will return a ",Object(i.b)("em",{parentName:"p"},"generic")," ",Object(i.b)("inlineCode",{parentName:"p"},"PaymentAccount")," which may be transformed to the dedicated\npayment account (",Object(i.b)("inlineCode",{parentName:"p"},"PaypalAccount"),", ",Object(i.b)("inlineCode",{parentName:"p"},"StripeAccount"),", ...). You can call the ",Object(i.b)("inlineCode",{parentName:"p"},"accountable()")," function on the selected\npayment in order to do this. For more information about this, we refer to the\n",Object(i.b)("a",{parentName:"p",href:"https://laravel.com/docs/master/eloquent-relationships#polymorphic-relations"},"Polymorphic Relationships")," in the\nofficial Laravel Docs."),Object(i.b)("a",{name:"payment-accounts"}),"## Manage Payment Accounts",Object(i.b)("p",null,"Apiato already provides some generic routes in order to allow users to manage their own ",Object(i.b)("inlineCode",{parentName:"p"},"PaymentAccount"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"GET /user/paymentaccounts")," : Get all available ",Object(i.b)("inlineCode",{parentName:"li"},"PaymentAccount"),"s for the current ",Object(i.b)("inlineCode",{parentName:"li"},"User"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"GET /user/paymentaccounts/{id}"),": Get the details of one specific ",Object(i.b)("inlineCode",{parentName:"li"},"PaymentAccount"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"PATCH /user/paymentaccounts/{id}"),": Update a ",Object(i.b)("inlineCode",{parentName:"li"},"PaymentAccount")," (this route does ",Object(i.b)("strong",{parentName:"li"},"not")," update the credentials for the\ncorresponding payment gateway)."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"DELETE /user/paymentaccounts/{id}"),": Delete a ",Object(i.b)("inlineCode",{parentName:"li"},"PaymentAccount")," including the payment gateway details (e.g., user\ncredentials for ",Object(i.b)("inlineCode",{parentName:"li"},"PayPal"),")."),Object(i.b)("li",{parentName:"ul"},"To create payment account use the dedicated endpoint (",Object(i.b)("inlineCode",{parentName:"li"},"createStripeAccount"),", ",Object(i.b)("inlineCode",{parentName:"li"},"createWepayAccount"),",...) provided by\nthe payment gateway container (Stripe, WePay,...). Each payment container has its own endpoint to ",Object(i.b)("inlineCode",{parentName:"li"},"create")," and\n",Object(i.b)("inlineCode",{parentName:"li"},"update")," account details, since each payment requires different data.")),Object(i.b)("a",{name:"payment-transactions"}),"## Payment Transactions",Object(i.b)("p",null,"When charging the user with a specific gateway (e.g., Paypal, Stripe, ...), the respective ",Object(i.b)("inlineCode",{parentName:"p"},"Task")," (e.g., the\n",Object(i.b)("inlineCode",{parentName:"p"},"\\App\\Containers\\Stripe\\Tasks\\ChargeWithStripeTask"),") should return a ",Object(i.b)("inlineCode",{parentName:"p"},"PaymentTransaction")," model. This model, in turn,\nshould contain respective information about the transaction that was made. For example, it contains the ",Object(i.b)("inlineCode",{parentName:"p"},"status"),' (e.g., "paid")\nor a flag indicating if the ',Object(i.b)("inlineCode",{parentName:"p"},"transaction")," was successfully handled (",Object(i.b)("inlineCode",{parentName:"p"},"is_successful"),")."),Object(i.b)("p",null,'Note that some information about the transaction are "pre-filled" by the ',Object(i.b)("inlineCode",{parentName:"p"},"PaymentGateway")," itself, so you don't need\nto manually do this in your ",Object(i.b)("inlineCode",{parentName:"p"},"CargeWithXTask"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"user_id")," : The ",Object(i.b)("inlineCode",{parentName:"li"},"User")," who started this transaction (i.e., the buyer)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"gateway")," : The gateway that was used for this transaction (e.g., ",Object(i.b)("inlineCode",{parentName:"li"},"Stripe"),")"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"amount")," : The amount the user was charged"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"currency")," : The currency the transaction was executed")),Object(i.b)("p",null,"Furthermore, the gateways may add the response from the gateway to the ",Object(i.b)("inlineCode",{parentName:"p"},"data")," field of the ",Object(i.b)("inlineCode",{parentName:"p"},"PaymentTransaction"),". The\n",Object(i.b)("inlineCode",{parentName:"p"},"custom"),' field, however, can be filled by the developer with own "custom" data.'),Object(i.b)("a",{name:"payment-gateway-container"}),"## Developing own Payment Gateway Containers",Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"Payment"),' container acts as generic foundation to "plug in" different containers that interacts with specific\npayment gateways (e.g., ',Object(i.b)("inlineCode",{parentName:"p"},"PayPal"),", ",Object(i.b)("inlineCode",{parentName:"p"},"Stripe"),", ...). This section introduces, how these containers shall be implemented\nin order to be used via the generic ",Object(i.b)("inlineCode",{parentName:"p"},"Payment")," container."),Object(i.b)("p",null,"In this example, we will develop a ",Object(i.b)("inlineCode",{parentName:"p"},"Foo")," container, that connects to the fictional ",Object(i.b)("inlineCode",{parentName:"p"},"FooPay")," service. As our service may\nneed to have its own ",Object(i.b)("inlineCode",{parentName:"p"},"Accounts"),", we will first need to create respective logic to add and update our ",Object(i.b)("inlineCode",{parentName:"p"},"FooAccount"),".\nImplement respective ",Object(i.b)("inlineCode",{parentName:"p"},"AddFooAccountAction")," and ",Object(i.b)("inlineCode",{parentName:"p"},"UpdateFooAccountAction")," based on the pre-shipped ",Object(i.b)("inlineCode",{parentName:"p"},"Stripe")," container."),Object(i.b)("p",null,"Basically, this provides the feature for the customer to create his own ",Object(i.b)("inlineCode",{parentName:"p"},"FooAccount")," within your own application. These\nactions must, for example, provide the functionality to store user credentials (e.g., the mail-address of the user for\nthis specific service). Please note that you do not need to provide a dedicated ",Object(i.b)("inlineCode",{parentName:"p"},"DELETE")," task (as this is handled by\nthe ",Object(i.b)("inlineCode",{parentName:"p"},"Payment")," container)."),Object(i.b)("p",null,"The most important functionality of your ",Object(i.b)("inlineCode",{parentName:"p"},"Foo")," container is how to charge the ",Object(i.b)("inlineCode",{parentName:"p"},"User")," with this service. You, therefore,\nneed to create your own ",Object(i.b)("inlineCode",{parentName:"p"},"ChargeWithFooTask"),". This class, however, needs to implement the ",Object(i.b)("inlineCode",{parentName:"p"},"PaymentChargerInterface"),"\ndistributed via the ",Object(i.b)("inlineCode",{parentName:"p"},"Payment")," container. This interface, in turn, requires you to implement the ",Object(i.b)("inlineCode",{parentName:"p"},"charge()")," method."),Object(i.b)("p",null,"This method needs to connect to the ",Object(i.b)("inlineCode",{parentName:"p"},"FooService"),", create the payment and return a ",Object(i.b)("inlineCode",{parentName:"p"},"PaymentTransaction")," model."),Object(i.b)("p",null,"Finally, you need to ",Object(i.b)("inlineCode",{parentName:"p"},"register")," the new service. This can be done in the ",Object(i.b)("inlineCode",{parentName:"p"},"Payment\\Configs\\payment-container.php")," file.\nFor the ",Object(i.b)("inlineCode",{parentName:"p"},"payment-container.gateways")," key, add the new entry for your ",Object(i.b)("inlineCode",{parentName:"p"},"Foo")," Payment Gateway. This may look like this:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-php"},"    // ...\n    'foo' => [\n        'container'   => 'Foo',\n        'charge_task' => \\App\\Containers\\Foo\\Tasks\\ChargeWithFooTask::class,\n    ],\n    // ...\n")),Object(i.b)("p",null,"Basically, this entry points to the ",Object(i.b)("inlineCode",{parentName:"p"},"charger_task")," that handles, how to charge a ",Object(i.b)("inlineCode",{parentName:"p"},"User")," with the specific ",Object(i.b)("inlineCode",{parentName:"p"},"Payment Gateway"),"."),Object(i.b)("p",null,"That's all!"),Object(i.b)("a",{name:"mocking-the-real-call-for-testing"}),"## Mocking the real payment call for Testing",Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-php"},"<?php\n\n// mock the ChargeWithStripeService external API call\n$this->mockIt(ChargeWithStripeService::class)->shouldReceive('charge')->andReturn([\n   'payment_method' => 'stripe',\n   'description' => $payId\n]);\n\n// mock the ChargeWithPaypalService external API call\n$this->mockIt(ChargeWithPaypalService::class)->shouldReceive('charge')->andReturn([\n   'payment_method' => 'paypal',\n   'description' => $payId\n]);\n")),Object(i.b)("p",null,"Checkout the ","[Tests Helpers]","({{ site.baseurl }}{% link _docs/miscellaneous/tests-helpers.md %}) page for about Testing."))}s.isMDXComponent=!0}}]);