(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{169:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return b}));var r=n(0),s=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var p=s.a.createContext({}),c=function(e){var t=s.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return s.a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return s.a.createElement(s.a.Fragment,{},t)}},d=s.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,b=u["".concat(i,".").concat(d)]||u[d]||m[d]||a;return n?s.a.createElement(b,o(o({ref:t},p),{},{components:n})):s.a.createElement(b,o({ref:t},p))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<a;p++)i[p]=n[p];return s.a.createElement.apply(null,i)}return s.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},77:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return c}));var r=n(3),s=n(8),a=(n(0),n(169)),i={title:"Authorization"},o={unversionedId:"features/authorization",id:"features/authorization",isDocsHomePage:!1,title:"Authorization",description:"- How it works",source:"@site/docs/features/authorization.md",slug:"/features/authorization",permalink:"/docs/docs/features/authorization",editUrl:"https://github.com/moslem-deris/docs/edit/main/docs/features/authorization.md",version:"current",lastUpdatedBy:"Moslem Deris",lastUpdatedAt:1617580354,formattedLastUpdatedAt:"4/4/2021",sidebar:"docs",previous:{title:"Authentication",permalink:"/docs/docs/features/authentication"},next:{title:"User Registration",permalink:"/docs/docs/features/user-registration"}},l=[{value:"How it works",id:"how-it-works",children:[]},{value:"Responses",id:"responses",children:[]},{value:"Assign Roles &amp; Permission to the Testing User",id:"assign-roles-permission-to-the-testing-user",children:[]},{value:"Seeding some users (Admins)",id:"seeding-some-users-admins",children:[]},{value:"Roles &amp; Permissions guards",id:"roles-permissions-guards",children:[]},{value:"Permissions Inheriting with Levels",id:"permissions-inheriting-with-levels",children:[]}],p={toc:l};function c(e){var t=e.components,n=Object(s.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"#how-it-works"},"How it works")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"#responses"},"Responses")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"#assign-roles-permission-to-the-testing-user"},"Assign Roles & Permission to the Testing User")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"#seeding-some-users-admins"},"Seeding some users (Admins)")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"#roles-permissions-guards"},"Roles & Permissions guards")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"#permissions-inheriting-with-levels"},"Permissions Inheriting with Levels"))),Object(a.b)("p",null,"apiato provides a Role-Based Access Control (RBAC) from it's Authorization Container."),Object(a.b)("p",null,"Behind the scenes apiato is using the ",Object(a.b)("a",{parentName:"p",href:"https://laravel.com/docs/master/authorization"},"Laravel's authorization")," functionality that was introduced in version 5.1.11 with the helper package ",Object(a.b)("a",{parentName:"p",href:"https://github.com/spatie/laravel-permission"},"laravel-permission"),". So you can always refer to the correspond documentation for more information."),Object(a.b)("h2",{id:"how-it-works"},"How it works"),Object(a.b)("p",null,"Authorization in apiato is very simple and easy."),Object(a.b)("p",null,"1) First you need to make sure you have a seeded Super Admin, an ",Object(a.b)("inlineCode",{parentName:"p"},"admin")," role and optionally your custom permissions (usually permissions should be statically created in the code). ",Object(a.b)("strong",{parentName:"p"},"apiato")," provides most of these stuff for you, you can find the code at any container ",Object(a.b)("inlineCode",{parentName:"p"},".../Data/Seeders/*")," directory ",Object(a.b)("em",{parentName:"p"},"(example: Authentication Container)"),"."),Object(a.b)("p",null,"2) Second create Roles, and attach some permissions to the roles."),Object(a.b)("p",null,"3) Now start creating users (or use existing users), to assign them to the new created Roles."),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"That should be done from your custom admin panel, which can consume the default provided Roles & Permissions API endpoints (Create Role, Assign User to Roles, List all Permission...).")),Object(a.b)("p",null,"3) Finally you need to protect your endpoints by Permissions (or/and Roles). The right place to do that is the Requests class."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Example protecting the (delete user) endpoint with ",Object(a.b)("inlineCode",{parentName:"strong"},"delete-users")," permission:")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace App\\Containers\\User\\UI\\API\\Requests;\n\nuse App\\Ship\\Parents\\Requests\\Request;\n\nclass DeleteUserRequest extends Request\n{\n\n    /**\n     * Define which Roles and/or Permissions has access to this request.\n     *\n     * @var  array\n     */\n    protected $access = [\n        'permissions' => 'delete-users', // Accepts Array and String ['delete-users', 'create-users'],\n        'roles'       => '',\n    ];\n\n\n    /**\n     * @return  bool\n     */\n    public function authorize()\n    {\n        return $this->check([\n            'hasAccess|isOwner',\n        ]);\n    }\n}\n\n")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"For detailed explanation of this example, please visit the ",Object(a.b)("a",{parentName:"strong",href:"requests"},"Requests")," Page.")),Object(a.b)("h2",{id:"responses"},"Responses"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Authorization failed JSON response:")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-json"},'{\n  "errors": "You have no access to this resource!",\n  "status_code": 403,\n  "message": "This action is unauthorized."\n}\n')),Object(a.b)("h2",{id:"assign-roles-permission-to-the-testing-user"},"Assign Roles & Permission to the Testing User"),Object(a.b)("p",null,"You will need to set ",Object(a.b)("inlineCode",{parentName:"p"},"$access")," property in your test class, check out the ",Object(a.b)("a",{parentName:"p",href:"tests-helpers"},"Tests Helpers")," page for more details."),Object(a.b)("h2",{id:"seeding-some-users-admins"},"Seeding some users (Admins)"),Object(a.b)("p",null,"By default ",Object(a.b)("strong",{parentName:"p"},"apiato")," comes with a ",Object(a.b)("inlineCode",{parentName:"p"},"Super Admin")," with Access to Admin Dashboard."),Object(a.b)("p",null,"This Super Admin Credentials are:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"email: ",Object(a.b)("a",{parentName:"li",href:"mailto:admin@admin.com"},"admin@admin.com")),Object(a.b)("li",{parentName:"ul"},"password: admin")),Object(a.b)("p",null,"This Admin seeded by ",Object(a.b)("inlineCode",{parentName:"p"},"app/Containers/Authorization/Data/Seeders/AuthorizationDefaultUsersSeeder_3.php"),"."),Object(a.b)("p",null,"The Default Super User, has a default role ",Object(a.b)("inlineCode",{parentName:"p"},"admin"),"."),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"admin")," default role ",Object(a.b)("strong",{parentName:"p"},"has no permissions given to it"),"."),Object(a.b)("p",null,"To give permissions to the ",Object(a.b)("inlineCode",{parentName:"p"},"admin")," role (or any other role), you can use the dedicated endpoints (from your custom Admin Interface) or use this command ",Object(a.b)("inlineCode",{parentName:"p"},"php artisan apiato:permissions:toRole admin")," to give it all the permissions in the system."),Object(a.b)("p",null,"Checkout each container ",Object(a.b)("strong",{parentName:"p"},"Seeders")," directory ",Object(a.b)("inlineCode",{parentName:"p"},"app/Containers/{container-name}/Data/Seeders/"),", to edit the default ",Object(a.b)("strong",{parentName:"p"},"Users"),", ",Object(a.b)("strong",{parentName:"p"},"Roles")," and ",Object(a.b)("strong",{parentName:"p"},"Permissions"),"."),Object(a.b)("h2",{id:"roles-permissions-guards"},"Roles & Permissions guards"),Object(a.b)("p",null,"By default Apiato uses a single guard called ",Object(a.b)("inlineCode",{parentName:"p"},"web")," for all it's roles and permissions, you can add/edit this behavior and support multiple guards at any time. Refer to the ",Object(a.b)("a",{parentName:"p",href:"https://github.com/spatie/laravel-permission#using-multiple-guards"},"laravel-permission")," package for more details."),Object(a.b)("h2",{id:"permissions-inheriting-with-levels"},"Permissions Inheriting with Levels"),Object(a.b)("p",null,"When you create a role you can set an optional parameter, called ",Object(a.b)("inlineCode",{parentName:"p"},"level"),", which is set to ",Object(a.b)("inlineCode",{parentName:"p"},"0")," by default,\nThe default seeded ",Object(a.b)("inlineCode",{parentName:"p"},"admin")," role has it set to ",Object(a.b)("inlineCode",{parentName:"p"},"999"),"."),Object(a.b)("p",null,"Level allows inheriting permissions.\nRole with higher level is inheriting permission from roles with lower level."),Object(a.b)("p",null,"Below is a nice example of how it works:"),Object(a.b)("p",null,"You have three roles: user, moderator and admin.\nUser has a permission to read articles, moderator can manage comments and admin can create articles.\nUser has a level 1, moderator level 2 and admin level 3.\nIt means, moderator and administrator has also permission to read articles, but administrator can manage comments as well."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-php"},"if ($user->getRoleLevel() > 10) {\n    //\n}\n")),Object(a.b)("p",null,"If user has multiple roles, the ",Object(a.b)("inlineCode",{parentName:"p"},"getRoleLevel()")," method returns the highest one."),Object(a.b)("p",null,"If you don't need the permissions inheriting feature, simply ignore the optional level parameter when creating roles."))}c.isMDXComponent=!0}}]);