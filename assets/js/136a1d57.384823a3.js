(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{168:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return d}));var r=n(0),a=n.n(r);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),p=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),b=r,d=u["".concat(o,".").concat(b)]||u[b]||m[b]||s;return n?a.a.createElement(d,i(i({ref:t},c),{},{components:n})):a.a.createElement(d,i({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=b;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var c=2;c<s;c++)o[c]=n[c];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},76:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return p}));var r=n(3),a=n(7),s=(n(0),n(168)),o={title:"Authorization"},i={unversionedId:"features/authorization",id:"features/authorization",isDocsHomePage:!1,title:"Authorization",description:"- How it works",source:"@site/docs/features/authorization.md",slug:"/features/authorization",permalink:"/docs/docs/features/authorization",editUrl:"https://github.com/moslem-deris/docs/edit/main/docs/features/authorization.md",version:"current",lastUpdatedBy:"Moslem Deris",lastUpdatedAt:1616802868,formattedLastUpdatedAt:"3/26/2021",sidebar:"docs",previous:{title:"Authentication",permalink:"/docs/docs/features/authentication"},next:{title:"User Registration",permalink:"/docs/docs/features/user-registration"}},l=[{value:"How it works",id:"how-it-works",children:[]},{value:"Responses",id:"responses",children:[]}],c={toc:l};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(s.b)("wrapper",Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("a",{parentName:"li",href:"#how-it-works"},"How it works")),Object(s.b)("li",{parentName:"ul"},Object(s.b)("a",{parentName:"li",href:"#responses"},"Responses")),Object(s.b)("li",{parentName:"ul"},Object(s.b)("a",{parentName:"li",href:"#assign-roles-permission-to-the-testing-user"},"Assign Roles & Permission to the Testing User")),Object(s.b)("li",{parentName:"ul"},Object(s.b)("a",{parentName:"li",href:"#seeding-some-users-admins"},"Seeding some users (Admins)")),Object(s.b)("li",{parentName:"ul"},Object(s.b)("a",{parentName:"li",href:"#Roles-Permissions-guards"},"Roles & Permissions guards")),Object(s.b)("li",{parentName:"ul"},Object(s.b)("a",{parentName:"li",href:"#Permissions-Inheriting-with-Levels"},"Permissions Inheriting with Levels"))),Object(s.b)("br",null),Object(s.b)("br",null),"apiato provides a Role-Based Access Control (RBAC) from it's Authorization Container.",Object(s.b)("p",null,"Behind the scenes apiato is using the ",Object(s.b)("a",{parentName:"p",href:"https://laravel.com/docs/master/authorization"},"Laravel's authorization")," functionality that was introduced in version 5.1.11 with the helper package ",Object(s.b)("a",{parentName:"p",href:"https://github.com/spatie/laravel-permission"},"laravel-permission"),". So you can always refer to the correspond documentation for more information."),Object(s.b)("a",{name:"how-it-works"}),Object(s.b)("h2",{id:"how-it-works"},"How it works"),Object(s.b)("p",null,"Authorization in apiato is very simple and easy."),Object(s.b)("p",null,"1) First you need to make sure you have a seeded Super Admin, an ",Object(s.b)("inlineCode",{parentName:"p"},"admin")," role and optionally your custom permissions (usually permissions should be statically created in the code). ",Object(s.b)("strong",{parentName:"p"},"apiato")," provides most of these stuff for you, you can find the code at any container ",Object(s.b)("inlineCode",{parentName:"p"},".../Data/Seeders/*")," directory ",Object(s.b)("em",{parentName:"p"},"(example: Authentication Container)"),"."),Object(s.b)("p",null,"2) Second create Roles, and attach some permissions to the roles."),Object(s.b)("p",null,"3) Now start creating users (or use existing users), to assign them to the new created Roles."),Object(s.b)("p",null,Object(s.b)("em",{parentName:"p"},"That should be done from your custom admin panel, which can consume the default provided Roles & Permissions API endpoints (Create Role, Assign User to Roles, List all Permission...).")),Object(s.b)("p",null,"3) Finally you need to protect your endpoints by Permissions (or/and Roles). The right place to do that is the Requests class."),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Example protecting the (delete user) endpoint with ",Object(s.b)("inlineCode",{parentName:"strong"},"delete-users")," permission:")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace App\\Containers\\User\\UI\\API\\Requests;\n\nuse App\\Ship\\Parents\\Requests\\Request;\n\nclass DeleteUserRequest extends Request\n{\n\n    /**\n     * Define which Roles and/or Permissions has access to this request.\n     *\n     * @var  array\n     */\n    protected $access = [\n        'permissions' => 'delete-users', // Accepts Array and String ['delete-users', 'create-users'],\n        'roles'       => '',\n    ];\n\n\n    /**\n     * @return  bool\n     */\n    public function authorize()\n    {\n        return $this->check([\n            'hasAccess|isOwner',\n        ]);\n    }\n}\n\n")),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"For detailed explanation of this example, please visit the ","[Requests]","({{ site.baseurl }}{% link _docs/components/requests.md %}) Page.")),Object(s.b)("a",{name:"responses"}),Object(s.b)("h2",{id:"responses"},"Responses"),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Authorization failed JSON response:")),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-json"},'{\n  "errors": "You have no access to this resource!",\n  "status_code": 403,\n  "message": "This action is unauthorized."\n}\n')),Object(s.b)("a",{name:"assign-roles-permission-to-the-testing-user"}),"## Assign Roles & Permission to the Testing User",Object(s.b)("p",null,"You will need to set ",Object(s.b)("inlineCode",{parentName:"p"},"$access")," property in your test class, check out the ","[Tests Helpers]","({{ site.baseurl }}{% link _docs/miscellaneous/tests-helpers.md %}) page for more details."),Object(s.b)("a",{name:"seeding-some-users-admins"}),"## Seeding some users (Admins)",Object(s.b)("p",null,"By default ",Object(s.b)("strong",{parentName:"p"},"apiato")," comes with a ",Object(s.b)("inlineCode",{parentName:"p"},"Super Admin")," with Access to Admin Dashboard."),Object(s.b)("p",null,"This Super Admin Credentials are:"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"email: ",Object(s.b)("a",{parentName:"li",href:"mailto:admin@admin.com"},"admin@admin.com")),Object(s.b)("li",{parentName:"ul"},"password: admin")),Object(s.b)("p",null,"This Admin seeded by ",Object(s.b)("inlineCode",{parentName:"p"},"app/Containers/Authorization/Data/Seeders/AuthorizationDefaultUsersSeeder_3.php"),"."),Object(s.b)("p",null,"The Default Super User, has a default role ",Object(s.b)("inlineCode",{parentName:"p"},"admin"),"."),Object(s.b)("p",null,"The ",Object(s.b)("inlineCode",{parentName:"p"},"admin")," default role ",Object(s.b)("strong",{parentName:"p"},"has no permissions given to it"),"."),Object(s.b)("p",null,"To give permissions to the ",Object(s.b)("inlineCode",{parentName:"p"},"admin")," role (or any other role), you can use the dedicated endpoints (from your custom Admin Interface) or use this command ",Object(s.b)("inlineCode",{parentName:"p"},"php artisan apiato:permissions:toRole admin")," to give it all the permissions in the system."),Object(s.b)("p",null,"Checkout each container ",Object(s.b)("strong",{parentName:"p"},"Seeders")," directory ",Object(s.b)("inlineCode",{parentName:"p"},"app/Containers/{container-name}/Data/Seeders/"),", to edit the default ",Object(s.b)("strong",{parentName:"p"},"Users"),", ",Object(s.b)("strong",{parentName:"p"},"Roles")," and ",Object(s.b)("strong",{parentName:"p"},"Permissions"),"."),Object(s.b)("a",{name:"Roles-Permissions-guards"}),"## Roles & Permissions guards",Object(s.b)("p",null,"By default Apiato uses a single guard called ",Object(s.b)("inlineCode",{parentName:"p"},"web")," for all it's roles and permissions, you can add/edit this behavior and support multiple guards at any time. Refer to the ",Object(s.b)("a",{parentName:"p",href:"https://github.com/spatie/laravel-permission#using-multiple-guards"},"laravel-permission")," package for more details."),Object(s.b)("a",{name:"Permissions-Inheriting-with-Levels"}),"## Permissions Inheriting with Levels",Object(s.b)("p",null,"When you create a role you can set an optional parameter, called ",Object(s.b)("inlineCode",{parentName:"p"},"level"),", which is set to ",Object(s.b)("inlineCode",{parentName:"p"},"0")," by default,\nThe default seeded ",Object(s.b)("inlineCode",{parentName:"p"},"admin")," role has it set to ",Object(s.b)("inlineCode",{parentName:"p"},"999"),"."),Object(s.b)("p",null,"Level allows inheriting permissions.\nRole with higher level is inheriting permission from roles with lower level."),Object(s.b)("p",null,"Below is a nice example of how it works:"),Object(s.b)("p",null,"You have three roles: user, moderator and admin.\nUser has a permission to read articles, moderator can manage comments and admin can create articles.\nUser has a level 1, moderator level 2 and admin level 3.\nIt means, moderator and administrator has also permission to read articles, but administrator can manage comments as well."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-php"},"if ($user->getRoleLevel() > 10) {\n    //\n}\n")),Object(s.b)("p",null,"If user has multiple roles, the ",Object(s.b)("inlineCode",{parentName:"p"},"getRoleLevel()")," method returns the highest one."),Object(s.b)("p",null,"If you don't need the permissions inheriting feature, simply ignore the optional level parameter when creating roles."))}p.isMDXComponent=!0}}]);