(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{127:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return l})),a.d(t,"toc",(function(){return s})),a.d(t,"default",(function(){return p}));var n=a(3),r=a(7),i=(a(0),a(168)),o={title:"Conventions and Principles",slug:"/conventions-and-principles"},l={unversionedId:"getting-started/conventions-and-principles",id:"getting-started/conventions-and-principles",isDocsHomePage:!1,title:"Conventions and Principles",description:"* HTTP Methods usage in RESTful API's",source:"@site/docs/getting-started/conventions-and-principles.md",slug:"/conventions-and-principles",permalink:"/docs/docs/conventions-and-principles",editUrl:"https://github.com/moslem-deris/docs/edit/main/docs/getting-started/conventions-and-principles.md",version:"current",lastUpdatedBy:"Moslem Deris",lastUpdatedAt:1616672537,formattedLastUpdatedAt:"3/25/2021",sidebar:"docs",previous:{title:"Software Architectural Patterns",permalink:"/docs/docs/software-architectural-patterns"},next:{title:"Code Generator",permalink:"/docs/docs/code-generator"}},s=[],c={toc:s};function p(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#HTTP-Methods"},"HTTP Methods usage in RESTful API's")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Naming-Conventions"},"Naming Conventions for Routes & Actions")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#General-guidelines"},"General guidelines and principles for RESTful URLs")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#Good-examples"},"Good URL examples")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#General-principles"},"General principles for HTTP methods"))),Object(i.b)("a",{name:"HTTP-Methods"}),"### HTTP Methods usage in RESTful API's - GET (SELECT): retrieve a specific resource from the server, or a listing of resources. - POST (CREATE): create a new resource on the server. - PUT (UPDATE): update a resource on the server, providing the entire resource. - PATCH (UPDATE): update a resource on the server, providing only changed attributes. - DELETE (DELETE): remove a resource from the server.",Object(i.b)("a",{name:"Naming-Conventions"}),"### Naming Conventions for Routes & Actions",Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"GetAllResource"),": to fetch all resources. You can apply ",Object(i.b)("inlineCode",{parentName:"li"},"?search")," query parameter to filter data."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"FindResourceByID"),": to search for single resource by its unique identifier."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"CreateResource"),": to create a new resource."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"UpdateResource"),": to update/edit existing resource."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"DeleteResource"),": to delete a resource.")),Object(i.b)("a",{name:"General-guidelines"}),"### General guidelines and principles for RESTful URLs",Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"A URL identifies a resource."),Object(i.b)("li",{parentName:"ul"},"URLs should include nouns, not verbs."),Object(i.b)("li",{parentName:"ul"},"Use plural nouns only for consistency (no singular nouns)."),Object(i.b)("li",{parentName:"ul"},"Use HTTP verbs (GET, POST, PUT, DELETE) to operate on the collections and elements."),Object(i.b)("li",{parentName:"ul"},"You should not need to go deeper than resource/identifier/resource."),Object(i.b)("li",{parentName:"ul"},"Put the version number at the base of your URL, for example ",Object(i.b)("inlineCode",{parentName:"li"},"http://apiato.test/v1/path/to/resource"),"."),Object(i.b)("li",{parentName:"ul"},'If an input data changes the logic of the endpoint, it should be passed in the URL. If not can go in the header "like Auth Token".'),Object(i.b)("li",{parentName:"ul"},"Don't use query parameters to alter state."),Object(i.b)("li",{parentName:"ul"},"Don't use mixed-case paths if you can help it; lowercase is best."),Object(i.b)("li",{parentName:"ul"},"Don't use implementation-specific extensions in your URIs (.php, .py, .pl, etc.)"),Object(i.b)("li",{parentName:"ul"},"Limit your URI space as much as possible. And keep path segments short."),Object(i.b)("li",{parentName:"ul"},"Don't put metadata in the body of a response that should be in a header")),Object(i.b)("a",{name:"Good-examples"}),"### Good URL examples",Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Find a single Car by its unique identifier (ID):",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"GET http://www.api.apiato.test/v1/cars/123")))),Object(i.b)("li",{parentName:"ul"},"Get all Cars:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"GET http://www.api.apiato.test/v1/cars")))),Object(i.b)("li",{parentName:"ul"},"Find/Search cars by one or more fields:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"GET http://www.api.apiato.test/v1/cars?search=maker:mercedes")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"GET http://www.api.apiato.test/v1/cars?search=maker:mercedes;color:white")))),Object(i.b)("li",{parentName:"ul"},"Order and Sort query result:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"GET http://www.api.apiato.test/v1/cars?orderBy=created_at&sortedBy=desc")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"GET http://www.api.apiato.test/v1/cars?search=maker:mercedes&orderBy=created_at&sortedBy=desc")))),Object(i.b)("li",{parentName:"ul"},"Specify optional fields:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"GET http://www.api.apiato.test/v1/cars?filter=id;name;status")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"GET http://www.api.apiato.test/v1/cars/123?filter=id;name;status")))),Object(i.b)("li",{parentName:"ul"},"Get all Drivers belonging to a Car:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"GET http://www.api.apiato.test/v1/cars/123/drivers")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"GET http://www.api.apiato.test/v1/cars/123/drivers/123/addresses")))),Object(i.b)("li",{parentName:"ul"},"Include Drivers objects relationship with the car response:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"GET http://www.api.apiato.test/v1/cars/123?include=drivers")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"GET http://www.api.apiato.test/v1/cars/123?include=drivers,owner")))),Object(i.b)("li",{parentName:"ul"},"Add new Car:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"POST http://www.api.apiato.test/v1/cars")))),Object(i.b)("li",{parentName:"ul"},"Add new Driver to a Car:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"POST http://www.api.apiato.test/v1/cars/123/drivers"))))),Object(i.b)("a",{name:"General-principles"}),"### General principles for HTTP methods",Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Don't ever use GET to alter state; to prevent Googlebot from corrupting your data. And use GET as much as possible."),Object(i.b)("li",{parentName:"ul"},"Don't use PUT unless you are updating an entire resource. And unless you can also legitimately do a GET on the same URI."),Object(i.b)("li",{parentName:"ul"},"Don't use POST to retrieve information that is long-lived or that might be reasonable to cache."),Object(i.b)("li",{parentName:"ul"},"Don't perform an operation that is not idempotent with PUT."),Object(i.b)("li",{parentName:"ul"},"Use GET for things like calculations, unless your input is large, in which case use POST."),Object(i.b)("li",{parentName:"ul"},"Use POST in preference to PUT when in doubt."),Object(i.b)("li",{parentName:"ul"},"Use POST whenever you have to do something that feels RPC-like."),Object(i.b)("li",{parentName:"ul"},"Use PUT for classes of resources that are larger or hierarchical."),Object(i.b)("li",{parentName:"ul"},"Use DELETE in preference to POST to remove resources.")))}p.isMDXComponent=!0},168:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return d}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=r.a.createContext({}),p=function(e){var t=r.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},b=function(e){var t=p(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),b=p(a),m=n,d=b["".concat(o,".").concat(m)]||b[m]||u[m]||i;return a?r.a.createElement(d,l(l({ref:t},c),{},{components:a})):r.a.createElement(d,l({ref:t},c))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var c=2;c<i;c++)o[c]=a[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);