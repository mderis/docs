(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{169:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return d}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=a.a.createContext({}),p=function(e){var n=a.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=p(e.components);return a.a.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},b=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(t),b=r,d=u["".concat(i,".").concat(b)]||u[b]||m[b]||o;return t?a.a.createElement(d,s(s({ref:n},l),{},{components:t})):a.a.createElement(d,s({ref:n},l))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=b;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},80:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return s})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return p}));var r=t(3),a=t(8),o=(t(0),t(169)),i={title:"Transformers"},s={unversionedId:"main-components/transformers",id:"main-components/transformers",isDocsHomePage:!1,title:"Transformers",description:"* Definition & Principles",source:"@site/docs/main-components/transformers.md",slug:"/main-components/transformers",permalink:"/docs/docs/main-components/transformers",editUrl:"https://github.com/moslem-deris/docs/edit/main/docs/main-components/transformers.md",version:"current",lastUpdatedBy:"Moslem Deris",lastUpdatedAt:1616802868,formattedLastUpdatedAt:"3/26/2021",sidebar:"docs",previous:{title:"Views",permalink:"/docs/docs/main-components/views"},next:{title:"Sub Actions",permalink:"/docs/docs/main-components/subactions"}},c=[{value:"Definition &amp; Principles",id:"definition--principles",children:[]},{value:"Rules",id:"rules",children:[]},{value:"Folder Structure",id:"folder-structure",children:[]},{value:"Code Samples",id:"code-samples",children:[]},{value:"Relationships (include)",id:"relationships-include",children:[]},{value:"Transformer Available helper functions:",id:"transformer-available-helper-functions",children:[]}],l={toc:c};function p(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#definition-principles"},"Definition & Principles")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#rules"},"Rules")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#folder-structure"},"Folder Structure")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#code-samples"},"Code Samples")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#relationships-include"},"Relationships (include)"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#from-front-end"},"From Front-end")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#from-back-end"},"From Back-end")))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#transformer-available-helper-functions"},"Transformer Available helper functions:"))),Object(o.b)("a",{name:"definition-principles"}),Object(o.b)("h3",{id:"definition--principles"},"Definition & Principles"),Object(o.b)("p",null,"Read from the ",Object(o.b)("a",{parentName:"p",href:"https://github.com/Mahmoudz/Porto#Transformers"},Object(o.b)("strong",{parentName:"a"},"Porto SAP Documentation (#Transformers)")),"."),Object(o.b)("a",{name:"rules"}),Object(o.b)("h3",{id:"rules"},"Rules"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"All API responses MUST be formatted via a Transformer.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Every Transformer SHOULD extend from ",Object(o.b)("inlineCode",{parentName:"p"},"App\\Ship\\Parents\\Transformers\\Transformer"),".")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Each Transformer MUST have a ",Object(o.b)("inlineCode",{parentName:"p"},"transform()")," function."))),Object(o.b)("a",{name:"folder-structure"}),Object(o.b)("h3",{id:"folder-structure"},"Folder Structure"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"}," - app\n    - Containers\n        - {container-name}\n            - UI\n                - API\n                    - Transformers\n                        - UserTransformer.php\n                        - ...\n")),Object(o.b)("a",{name:"code-samples"}),Object(o.b)("h3",{id:"code-samples"},"Code Samples"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Reward Transformer with Country relation:")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace App\\Containers\\Item\\UI\\API\\Transformers;\n\nuse App\\Containers\\Item\\Models\\Item;\nuse App\\Ship\\Parents\\Transformers\\Transformer;\n\nclass ItemTransformer extends Transformer\n{\n\n    protected $availableIncludes = [\n        'images',\n    ];\n\n    protected $defaultIncludes = [\n        'roles',\n    ];\n\n    public function transform(Item $item)\n    {\n        $response = [\n            'object'      => 'Item',\n            'id'          => $item->getHashedKey(),\n            'name'        => $item->name,\n            'description' => $item->description,\n            'price'       => (float)$item->price,\n            'weight'      => (float)$item->weight,\n            'created_at'  => $item->created_at,\n            'updated_at'  => $item->updated_at,\n        ];\n\n        // add more or modify data for Admins only\n        $response = $this->ifAdmin([\n            'real_id'    => $user->id,\n            'deleted_at' => $user->deleted_at,\n        ], $response);\n\n        return $response;\n    }\n\n    public function includeImages(Item $item)\n    {\n        return $this->collection($item->images, new ItemImageTransformer());\n    }\n\n    public function includeRoles(User $user)\n    {\n        return $this->collection($user->roles, new RoleTransformer());\n    }\n}\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Usage from Controller (Single Item)")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"<?php\n\n// getting any Model\n$user = $this->getUser();\n\n// building the response with the transformer of the Model\n$this->response->item($user, new UserTransformer());\n\n// in case of collection of data\n$this->response->collection($user, new UserTransformer());\n\n// in case of Array\n$this->response->array([\n    'custom_field'  =>  'whatever',\n    'email'         =>  $user->email,\n]);\n\n// more options are available\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Usage from Controller (Multiple Items/Collection)")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"<?php\n\n// getting many Models Paginated\n$rewards = $this->getRewards();\n\n// building the response with the transformer of the Model\nreturn $this->response->paginator($rewards, new RewardTransformer());\n\n")),Object(o.b)("a",{name:"relationships-include"}),Object(o.b)("h3",{id:"relationships-include"},"Relationships (include)"),Object(o.b)("p",null,"Loading relationships with the Transformer (calling other Transformers):"),Object(o.b)("p",null,"This can be done in 2 ways:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"By the User, he can specify what to relations to return in the response.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"By the Developer, define what relations to include at run time."))),Object(o.b)("a",{name:"from-front-end"}),Object(o.b)("h4",{id:"from-front-end"},"From Front-end"),Object(o.b)("p",null,"You can request data with their relationships directly from the API call using ",Object(o.b)("inlineCode",{parentName:"p"},"include=tags,user"),". But first the Transformer need to have the ",Object(o.b)("inlineCode",{parentName:"p"},"availableIncludes")," defined with their functions like this:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace App\\Containers\\Account\\UI\\API\\Transformers;\n\nuse App\\Ship\\Parents\\Transformers\\Transformer;\nuse App\\Containers\\Account\\Models\\Account;\nuse App\\Containers\\Tag\\Transformers\\TagTransformer;\nuse App\\Containers\\User\\Transformers\\UserTransformer;\n\nclass AccountTransformer extends Transformer\n{\n    protected $availableIncludes = [\n        'tags',\n        'user',\n    ];\n\n    public function transform(Account $account)\n    {\n        return [\n            'id'       => (int)$account->id,\n            'url'      => $account->url,\n            'username' => $account->username,\n            'secret'   => $account->secret,\n            'note'     => $account->note,\n        ];\n    }\n\n    public function includeTags(Account $account)\n    {\n        // use collection with `multi` relationship\n        return $this->collection($account->tags, new TagTransformer());\n    }\n\n    public function includeUser(Account $account)\n    {\n        // use `item` with single relationship\n        return $this->item($account->user, new UserTransformer());\n    }\n\n}\n")),Object(o.b)("p",null,"Now to get the ",Object(o.b)("inlineCode",{parentName:"p"},"Tags")," with the response when Accounts are requested pass the ",Object(o.b)("inlineCode",{parentName:"p"},"?include=tags")," parameter with the ","[GET]"," request."),Object(o.b)("p",null,"To get Tags with User use the comma separator: ",Object(o.b)("inlineCode",{parentName:"p"},"?include=tags,user"),"."),Object(o.b)("a",{name:"from-back-end"}),Object(o.b)("h4",{id:"from-back-end"},"From Back-end"),Object(o.b)("p",null,"From the controller you can dynamically set the ",Object(o.b)("inlineCode",{parentName:"p"},"DefaultInclude")," using (",Object(o.b)("inlineCode",{parentName:"p"},"setDefaultIncludes"),") anytime you want."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"<?php\n\nreturn $this->response->paginator($rewards, (new ProductsTransformer())->setDefaultIncludes(['tags']));\n\n")),Object(o.b)("p",null,"You need to have ",Object(o.b)("inlineCode",{parentName:"p"},"includeTags")," function defined on the transformer. Look at the full examples above."),Object(o.b)("p",null,"If you want to include a relation with every response from this transformer you can define the relation directly in the transformer on (",Object(o.b)("inlineCode",{parentName:"p"},"$defaultIncludes"),")"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php"},"<?php\n\nprotected $availableIncludes = [\n    'users',\n];\n\nprotected $defaultIncludes = [\n    'tags',\n];\n\n// ..\n")),Object(o.b)("p",null,"You need to have ",Object(o.b)("inlineCode",{parentName:"p"},"includeUser")," and ",Object(o.b)("inlineCode",{parentName:"p"},"includeTags")," functions defined on the transformer. Look at the full examples above."),Object(o.b)("a",{name:"transformer-available-helper-functions"}),Object(o.b)("h2",{id:"transformer-available-helper-functions"},"Transformer Available helper functions:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"user()")," : returns current authenticated user object.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"ifAdmin($adminResponse, $clientResponse)")," : merges normal client response with the admin extra or modified results, when current authenticated user is Admin."))),Object(o.b)("p",null,"For more information about the Transformers read ",Object(o.b)("a",{parentName:"p",href:"http://fractal.thephpleague.com/transformers/"},"this"),"."))}p.isMDXComponent=!0}}]);